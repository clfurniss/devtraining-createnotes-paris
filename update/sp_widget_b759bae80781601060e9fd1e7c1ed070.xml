<?xml version="1.0" encoding="UTF-8"?><record_update table="sp_widget">
    <sp_widget action="INSERT_OR_UPDATE">
        <category>custom</category>
        <client_script><![CDATA[api.controller=function($scope,$rootScope) {
	/* widget controller */
	var c = this;

	// Listen for the 'selectNote' event
	$rootScope.$on('selectNote', function(event, data) {
		console.log('%cListener caught NoteId: ' + $rootScope.noteID, 'color:green');

		// this.server.get() calls the Server script and passes custom input
		// this.server.get() returns a promise. When the response is received from the server, the .then() function logic executes.
		c.server.get(

			// The server script will access the inputs passed as input.action and input.noteID
			{
				action: 'getNote',
				noteID: $rootScope.noteID
			}
		).then(function (response) {
			c.data.title = response.data.note.title;
			c.data.note = response.data.note.note;
			c.data.noteID = response.data.note.sys_id;
		})
	});

	c.updateNote = function(updateType) {

		c.server.get(
			
			// The server will access the passed inputs as 'input.action, input.noteID, input.noteBody, input.noteTitle'
			{
				action: 'updateNote',
				noteID: c.data.noteID,
				noteBody: c.data.note,
				noteTitle: c.data.title
			}).then(function (response) {
         
			// Emit/broadcast an event so that listening widgets can react/respond accordingly. 
			$rootScope.$emit('refreshNotes');
		});
	}
}]]></client_script>
        <controller_as>c</controller_as>
        <css/>
        <data_table>sp_instance</data_table>
        <demo_data/>
        <description/>
        <docs/>
        <field_list/>
        <has_preview>false</has_preview>
        <id>notes_body</id>
        <internal>false</internal>
        <link><![CDATA[function link(scope, element, attrs, controller) {  }]]></link>
        <name>Notes Body</name>
        <option_schema/>
        <public>false</public>
        <roles/>
        <script><![CDATA[(function() {
	/* populate the 'data' object */
	/* e.g., data.table = $sp.getValue('table'); */

	// Recall that the input object is the data object received from the Client Script's controller.
	if(input && input.noteID) {

		var note = new GlideRecord('x_snc_createnotes_note');

		if(note.get(input.noteID)) {
			
			if(input.action == 'getNote') {
				data.note = {};

				$sp.getRecordDisplayValues(data.note, note, "title,note,sys_id");
			} else if (input.action == 'updateNote') { 
				// Set the updated values
				note.title = input.noteTitle; 
				note.note = input.noteBody; 
				note.update(); // Update the record in the database
			}
		} 
	} 
})();]]></script>
        <servicenow>false</servicenow>
        <sys_class_name>sp_widget</sys_class_name>
        <sys_created_by>cfurniss</sys_created_by>
        <sys_created_on>2020-12-09 23:10:25</sys_created_on>
        <sys_id>b759bae80781601060e9fd1e7c1ed070</sys_id>
        <sys_mod_count>11</sys_mod_count>
        <sys_name>Notes Body</sys_name>
        <sys_package display_value="CreateNotes" source="x_snc_createnotes">df5fd9a5090232007f44e1046c8ff69f</sys_package>
        <sys_policy/>
        <sys_scope display_value="CreateNotes">df5fd9a5090232007f44e1046c8ff69f</sys_scope>
        <sys_update_name>sp_widget_b759bae80781601060e9fd1e7c1ed070</sys_update_name>
        <sys_updated_by>cfurniss</sys_updated_by>
        <sys_updated_on>2020-12-10 02:02:59</sys_updated_on>
        <template><![CDATA[<!-- the AngularJS directive ng-show is used to show/hide the widget based on whether c.data.noteID has a value.
Until a record is selected in the Notes List widget, the Notes Body c.data.noteID property has no value. -->
<div class="panel panel-default" ng-show="c.data.noteID">
  <div class="panel-heading clearfix">
    <div class="row">
      <div class="col-md-12">
        <!-- Bind the input value to c.data.title -->
        <input class="form-control" id="note-title" ng-model="c.data.title" ng-change="c.updateNote('title')" ng-model-options="{debounce: 1000}" />
      </div>
    </div>
  </div>
  <div class="panel-body">
     <!-- Bind the input value to c.data.note -->
    <textarea class="form-control" id="note-body" ng-model="c.data.note" ng-change="c.updateNote('body')" ng-model-options="{debounce: 1000}" ></textarea>
  </div>
</div>]]></template>
    </sp_widget>
</record_update>
